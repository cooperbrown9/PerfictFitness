{"Name":"DACircularProgress","Id":2266,"Alias":"DACircularProgress","Description":"\n`CircularProgress` is a `UIView` subclass with circular `UIProgressView` \nproperties.\n\n## Usage\n\nIt is easy to use `CircularProgressView`:\n\n    var rect = new CGRect(140.0f, 30.0f, 40.0f, 40.0f);\n\t\n    // create the control\n    var progressView = new CircularProgressView(rect);\n    progressView.RoundedCorners = true;\n    progressView.TrackTintColor = UIColor.Clear;\n    \n    View.AddSubview(progressView);\n\nIn addition to the traditional circular progress view, \n`LabeledCircularProgressView` provides a `UILabel` to allow a textual \nrepresentation of the current progress:\n\n    // create the control\n    var progressView = new LabeledCircularProgressView(rect);\n    progressView.RoundedCorners = true;\n    progressView.TrackTintColor = UIColor.Clear;\n    \n    // set the text\n    progressView.ProgressLabel.Text = \"10%\";\n\n## Members\n\nBoth progress views provide numerous properties and methods that can be\nused to control the appearance of the progress view:\n\n * **TrackTintColor**  \n   Represents the color of the track\n\n * **ProgressTintColor**  \n   Represents the color of the progress bar\n\n * **InnerTintColor**  \n   Represents the fill color of the circle\n\n * **RoundedCorners**  \n   Indicates whether to use rounding for the progress bar\n\n * **ThicknessRatio**  \n   Represents the ratio of the track to overall size (0.0 - 1.0)\n\n * **ClockwiseProgress**  \n   Indicates whether the progress is clockwise or counter-clockwise\n\n * **Progress**  \n   Represents the percent progress (0.0 - 1.0)\n\n * **IndeterminateDuration**  \n   Represents the speed of the indeterminate animation\n\n * **Indeterminate**  \n   Indicates whether the progress is indeterminate\n\n * **SetProgress()**  \n   Provides a way to set the progress, along with an animation and other values\n","Version":"2.3.1.0","Summary":"DACircularProgress is a UIView subclass with circular UIProgressView properties.","QuickStart":"\n`CircularProgress` is a `UIView` subclass with circular `UIProgressView` \nproperties.\n\n## Usage\n\nIt is easy to use `CircularProgressView`:\n\n    var rect = new CGRect(140.0f, 30.0f, 40.0f, 40.0f);\n\t\n    // create the control\n    var progressView = new CircularProgressView(rect);\n    progressView.RoundedCorners = true;\n    progressView.TrackTintColor = UIColor.Clear;\n    \n    View.AddSubview(progressView);\n\nIn addition to the traditional circular progress view, \n`LabeledCircularProgressView` provides a `UILabel` to allow a textual \nrepresentation of the current progress:\n\n    // create the control\n    var progressView = new LabeledCircularProgressView(rect);\n    progressView.RoundedCorners = true;\n    progressView.TrackTintColor = UIColor.Clear;\n    \n    // set the text\n    progressView.ProgressLabel.Text = \"10%\";\n\n## Members\n\nBoth progress views provide numerous properties and methods that can be\nused to control the appearance of the progress view:\n\n * **TrackTintColor**  \n   Represents the color of the track\n\n * **ProgressTintColor**  \n   Represents the color of the progress bar\n\n * **InnerTintColor**  \n   Represents the fill color of the circle\n\n * **RoundedCorners**  \n   Indicates whether to use rounding for the progress bar\n\n * **ThicknessRatio**  \n   Represents the ratio of the track to overall size (0.0 - 1.0)\n\n * **ClockwiseProgress**  \n   Indicates whether the progress is clockwise or counter-clockwise\n\n * **Progress**  \n   Represents the percent progress (0.0 - 1.0)\n\n * **IndeterminateDuration**  \n   Represents the speed of the indeterminate animation\n\n * **Indeterminate**  \n   Indicates whether the progress is indeterminate\n\n * **SetProgress()**  \n   Provides a way to set the progress, along with an animation and other values\n","Hash":"d1cd46394e20babf23bfec9bbb3caa4a","TargetPlatforms":["ios"],"TrialHash":null}